AWSTemplateFormatVersion: "2010-09-09"
Description: VPC definition.
Metadata:
  Role: network
Parameters:
  Environment:
    Description: "Enter shared, dev1, devf, mint, demo, stge, prod. Default is mint."
    Type: String
    Default: mint
    AllowedPattern: ^(shared|dev|production|staging|demo|mint|int-[a-z]+)$
  CIDR:
    Description: "Enter CIDR block for VPC"
    Type: String
Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref CIDR
      EnableDnsHostnames: "true"
      Tags:
      - Key: Environment
        Value: !Ref Environment
      - Key: Name
        Value: !Sub "canvaseli-${Environment}-vpc"
      - Key: Role
        Value: vpc
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ]]
      MapPublicIpOnLaunch: true
      AvailabilityZone:  !Join ["",[ !Ref "AWS::Region", "a"]]
      Tags:
      - Key: "Application"
        Value:
          Ref: "AWS::StackName"
      - Key: "Network"
        Value: "Public"
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ]]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Join ["",[ !Ref "AWS::Region", "b"]]
      Tags:
      - Key: "Application"
        Value:
          Ref: "AWS::StackName"
      - Key: "Network"
        Value: "Public"
  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ]]
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Join ["",[ !Ref "AWS::Region", "a"]]
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Private"
        -
          Key: "Name"
          Value: "Private"
  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ]]
      AvailabilityZone: !Join ["",[ !Ref "AWS::Region", "b"]]
      MapPublicIpOnLaunch: false
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Private"
        -
          Key: "Name"
          Value: "Private"
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${Environment}-public-acl"
      - Key: "Application"
        Value: !Ref "AWS::StackName"
      - Key: Environment
        Value: !Ref Environment
      - Key: Network
        Value: Public
      - Key: Role
        Value: vpc
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${Environment}-private-acl"
      - Key: Environment
        Value: !Ref Environment
      - Key: "Application"
        Value: !Ref "AWS::StackName"
      - Key: Network
        Value: Private
      - Key: Role
        Value: vpc
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref "InternetGateway"
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: "Application"
          Value: !Ref "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: "GatewayToInternet"
    Properties:
      RouteTableId: !Ref "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref "InternetGateway"
  PublicSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref "PublicSubnet1"
      RouteTableId: !Ref "PublicRouteTable"
  PublicSubnetRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref "PublicSubnet2"
      RouteTableId: !Ref "PublicRouteTable"
  InboundHTTPPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref "PublicNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  OutboundPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref "PublicNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  PublicSubnetNetworkAclAssociation1:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref "PublicSubnet1"
      NetworkAclId: !Ref "PublicNetworkAcl"
  PublicSubnetNetworkAclAssociation2:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref "PublicSubnet2"
      NetworkAclId: !Ref "PublicNetworkAcl"
  NATGateway1:
    DependsOn: "GatewayToInternet"
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
          - "ElasticIP1"
          - "AllocationId"
      SubnetId: !Ref "PublicSubnet1"
  NATGateway2:
    DependsOn: "GatewayToInternet"
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
          - "ElasticIP2"
          - "AllocationId"
      SubnetId: !Ref "PublicSubnet2"
  ElasticIP1:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"
  ElasticIP2:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"
  PrivateRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: Network
          Value: Private
  PrivateRouteTable2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: Network
          Value: Private
  PrivateRouteToInternet:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref "PrivateRouteTable1"
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref "NATGateway1"
  # PrivateRouteToInternet2:
  #   Type: "AWS::EC2::Route"
  #   Properties:
  #     RouteTableId: !Ref "PrivateRouteTable2"
  #     DestinationCidrBlock: "0.0.0.0/0"
  #     NatGatewayId: !Ref "NATGateway2"
  PrivateSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref "PrivateSubnet1"
      RouteTableId: !Ref "PrivateRouteTable1"
  PrivateSubnetRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref "PrivateSubnet2"
      RouteTableId: !Ref "PrivateRouteTable2"
Outputs:
  VpcId:
    Value: !Ref VPC
  PublicSubnet1:
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Value: !Ref PublicSubnet2
  PrivateSubnet1:
    Value: !Ref PrivateSubnet1
  PrivateSubnet2:
    Value: !Ref PrivateSubnet2
